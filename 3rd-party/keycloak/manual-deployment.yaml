apiVersion: v1
kind: Namespace
metadata:
  name: hbr-keycloak
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: hbr-keycloak
type: Opaque
stringData:
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "aab++112"
  POSTGRES_DB: "keycloak"
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: hbr-keycloak
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMVENDQWhXZ0F3SUJBZ0lVUVRQREtLUGtRYjZBYWNXN2htTFdtSThOOVg4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0pqRVJNQThHQTFVRUF3d0libWRwYm5oemRtTXhFVEFQQmdOVkJBb01DRzVuYVc1NGMzWmpNQjRYRFRJegpNRFF3T1RBM01qSTFOVm9YRFRJME1EUXdPREEzTWpJMU5Wb3dKakVSTUE4R0ExVUVBd3dJYm1kcGJuaHpkbU14CkVUQVBCZ05WQkFvTUNHNW5hVzU0YzNaak1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQWwrai9XcFVwQmtNdFBkemV4SGM0WlZHeENpdDlxUmRlV1FDay9JUXNVS1JkNGJSQTlFMXRGTzNheENnRQpKcGdYL1RHSHhid2VvMFVrU3BRU2czYzBoZ09KaWJKWGxlTmpsM0VTOXNmQWVCZEdVVFNMYzFtZ0x0Sm5sYklaClE2U3NnZ3RuZ3VGSFRZcFBoblBCZ1MzTkFjYk1WK01ZTlNEamVXQnJWTVI3RWM5YmJrT3d3VHNod1lXNEorTzUKdUdRTlhYUWNLWFdDdTRRZXpoUmNnOVhseEhWUTkxTURnNEJLbk5jUm9QdVRBaHdlWUJGSGZTenNJbTBQTzE5Qgp1c093cmJCTXNhV2UyZzRqbEIrZmtCMExLbS84RklRZnVXUS95eTVZYnpoK0kzT0xoUTdvYmNQUzlBNHl1R0Y1CnhVNExZbFRpNFN2UnBGSHN0QUxQT0JzVzd3SURBUUFCbzFNd1VUQWRCZ05WSFE0RUZnUVV5SkFxV21ISEtiTzEKWk0vMDhzc2NHRkFYQ1h3d0h3WURWUjBqQkJnd0ZvQVV5SkFxV21ISEtiTzFaTS8wOHNzY0dGQVhDWHd3RHdZRApWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWE0Sk8xSGZ6Z0FPTTJUb3JmRFFEClhVNWM3bENjYmRDa1ZGeHBBQUlyeVo3WWljMm1mcllTNHMwMTU1dHVqUTNqLy9hVlYwTWFpOU96bGVTdmFockQKeU9veE9INzUrZWtUd1BkSHhvaHoxbFI5dW1yRUNBcXlIYnR2SXBCcFliTXFnZmp6KzJZNFBib290ZmhjMHVWZwptRFRsN1d3ak1XMURiQmlsM3ptSlRZZU5vSThUTXlCTWhwcGt0UndDVkM4VGRsRHNBUHZFWlZXUDBpL3VGOHBDCmZlZXFiaEtQSHZjZUV5V3Q4U0N0aDhmaDAycnViQlBjT3RycmtuUUlxakpxeVFPUFFXNjM1TGpxQTM0aWpBcEEKNDJxTlIzWGJvdTFOSkM3Wk8vdzJQYmtLZnlCNkNrdmRHQ3dOZWxjSnpRZXN1RWd6NDNrS240RUVIK09vUkFVTQprdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktrd2dnU2xBZ0VBQW9JQkFRQ1g2UDlhbFNrR1F5MDkKM043RWR6aGxVYkVLSzMycEYxNVpBS1Q4aEN4UXBGM2h0RUQwVFcwVTdkckVLQVFtbUJmOU1ZZkZ2QjZqUlNSSwpsQktEZHpTR0E0bUpzbGVWNDJPWGNSTDJ4OEI0RjBaUk5JdHpXYUF1MG1lVnNobERwS3lDQzJlQzRVZE5paytHCmM4R0JMYzBCeHN4WDR4ZzFJT041WUd0VXhIc1J6MXR1UTdEQk95SEJoYmduNDdtNFpBMWRkQndwZFlLN2hCN08KRkZ5RDFlWEVkVkQzVXdPRGdFcWMxeEdnKzVNQ0hCNWdFVWQ5TE93aWJRODdYMEc2dzdDdHNFeXhwWjdhRGlPVQpINStRSFFzcWIvd1VoQis1WkQvTExsaHZPSDRqYzR1RkR1aHR3OUwwRGpLNFlYbkZUZ3RpVk9MaEs5R2tVZXkwCkFzODRHeGJ2QWdNQkFBRUNnZ0VBT2dic2srTnFXbFFLMGhpdWw0bWE1MGovUVkwL1lQbm1Oa1ZDd0pxVWV2RnUKVXlzUnJNQnVySkgzQVByd0t2WHFJL05wazZTNlowK2YvMFQwbFhkUmZ1ZVhBQnc1eksyaGUxWGNFcHhXN3dpaworWndDc0x0SnJ0ajhiSGd0b21NaTZrSUU5aityaHZrUVM2R29CdnBCMXkzakhLZEl0ZktzTWM4YzhMSmsrSFlRCkltS09RWlpZQ3lzZlpQTld3NW5oR3k0VlpoeGo3T2J5MHJiLzU0bHVXNkdoSE9yY1hXRXVwbWY5UGNibVYzeHkKV0pvWmJOb1hKZjFEakhZeHltWmFIRnlPQ3ZVT1hDQmJiTzBQNENlbm0yYjJ0Wm8vWlo2VUxpeFNTUExiUlF3MApnbSs4K0prVzhRZS9WT2N5MjdNV0trbUVGUUV3T0dkQUR3dnQ3Q04rRVFLQmdRREhLd3JTVlpMa2FrZkFDTXZ3CkJCcXppT0xZQkxVRFhWNDVCV0w1eHpMK2lGbmJMUnROQndzeXd6MGh4KzNxeXdoRm5IQStKMURVcXg4cDkvR08KRER5Y0REZFUzbk1VandPNFNwMUdNeUtHb1B5bWk3aVFrWFBOT3Y3TXFpRmtvZitvcHBBSWV5U3RvTURvdkJidQpxL2lMWXM0MnJvNTF3NWtkYkVJTVE4TkpNd0tCZ1FERFFkTUg1V2NrNG96b3JlY3REU1VLZ1lUMzc4MnJHZzNFClRxTFdmYUZFcGtaUi9qVVU4OHp2VytBTTlDYXJQUFd1ZFZWaU1MNTAyWktqM0RCQ3pORGQ2ZkxCdHFmSGRCbnkKWnMvcWYvb2hya0kwOHIrRjZibFV0ejZJWWQxeFZBM2dENFJYY2tpWXpCWGhYYTNYVmVTNllBWFI4bmF4RmZiZwptYW9DUU5jVFZRS0JnUUNHWFRaV3dkNXdkSGJsU2NuenFZRXQvN294eTdNbWl2WEcrQ2hXcEJsMStCek9yWGFPCmw2THBZeWU1dzN4eGV2bWdwTEpnYS91dkRhYmZsR01FMXFLSkVBREFJN1oxZHlvbVNVZ2pGTnBGQXhTUGN4RlgKanBrV0txZTlBVVczODBaYnk4cTl2ZjMzbU15cjlrQnVVZHhDaEt6ajNRMUV5MmxmblNwTnhlVllXd0tCZ1FDSwplSXI5Ulk0QlZYMFNvZ21aSklKSlVoTUhkaFFJTEtEb3Y4K3hoMFN3RjY4MUJLK0dYV1BQdC90TGxIWTc2QzVmCmU2eUN4d2k2ZTNZSUtPWTg2VjJTa3cvcW11dWZnbEhJVzJ0RjVWNXhObENUbGplRzgzclFmbWVsZHFvQmJkZXQKTjdQbUJCRkI4ekh0TW05UGtBVjJ1eFJGa01ybHlTcmNtMzA2dmRzSlJRS0JnUUNINERRZEFNbnVMVk9UMVU4RwpzY0h2RmlpZFN2aEZ3dk45ejNpU2JmZytKbHRmYkxQbXlEREdGc2lIQzZQcG4yZHdneVp2MjZxYnRvVE9oZjRMClNkcTZDWjJVZi80c3RpbWJWbEtxK2J4UzdxMENIanYrYWtqUWwwbC9wY3cwOWdMU2ZDYmd5dEdMQXA4WW5VQXAKOWhiczF4RUFmcXJEdzdIbVkyb2dBanFuSFE9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-secrets
  namespace: hbr-keycloak
type: Opaque
stringData:
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_ADMIN_PASSWORD: "admin"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv
  namespace: hbr-keycloak
  labels:
    type: local
    app: postgres
spec:
  storageClassName: "standard"
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: hbr-keycloak
  labels:
    app: postgres
spec:
  storageClassName: "standard"
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: hbr-keycloak
  labels:
    app: postgres
spec:
  ports:
    - port: 5432
      name: postgres
  selector:
    app: postgres
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: hbr-keycloak
spec:
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - image: postgres:latest
          name: postgres
          envFrom:
            - secretRef:
                name: postgres-credentials
          ports:
            - containerPort: 5432
              name: postgres
          securityContext:
            privileged: false
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            limits:
              memory: 512Mi
              cpu: "1"
            requests:
              memory: 256Mi
              cpu: "0.2"
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: hbr-keycloak
  labels:
    app: keycloak
spec:
  ports:
    - name: https
      port: 443
      targetPort: 8080
  selector:
    app: keycloak
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: hbr-keycloak
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:21.0.2
          args: ["start-dev"]
          env:
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  key: KEYCLOAK_ADMIN
                  name: keycloak-secrets
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: KEYCLOAK_ADMIN_PASSWORD
                  name: keycloak-secrets
            - name: KC_PROXY
              value: "edge"
            - name: KC_HEALTH_ENABLED
              value: "true"
            - name: KC_METRICS_ENABLED
              value: "true"
            - name: KC_HOSTNAME_STRICT_HTTPS
              value: "true"
            - name: KC_LOG_LEVEL
              value: INFO
            - name: KC_DB
              value: postgres
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_DB
            - name: KC_DB_URL
              value: jdbc:postgresql://postgres/$(POSTGRES_DB)
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_USER
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_PASSWORD
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8080
            initialDelaySeconds: 250
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8080
            initialDelaySeconds: 500
            periodSeconds: 30
          resources:
            limits:
              memory: 512Mi
              cpu: "1"
            requests:
              memory: 256Mi
              cpu: "0.2"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keycloak
  namespace: hbr-keycloak
spec:
  tls:
    - hosts:
        - localhost
      secretName: tls-secret
  rules:
    - host: localhost
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: keycloak
                port:
                  number: 443
